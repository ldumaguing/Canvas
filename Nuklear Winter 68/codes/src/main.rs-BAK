use std::env;
use mysql::*;
use mysql::prelude::*;

#[derive(Debug, PartialEq, Eq)]
struct Chit {
    id: i32,
    name: Option<String>,
    front: Option<String>,
    back: Option<String>,
}

fn main() -> std::result::Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    println!("{} {}", &args[0], args.len());
    if args.len() < 3 {
        instructions();
        std::process::exit(0) }


    let url = "mysql://ayeka@localhost:3306/Nuklear_Winter_68";
    let pool = Pool::new(url)?;
    let conn = pool.get_conn()?;

    if is_unit(&args[1], conn) {
        println!("yup");
    }





    
    Ok (())
}

// *************************************************************************************************
fn is_unit (s: &str, conn: PooledConn) -> bool {
    println!("{}", s);
    
    let selected = conn
        .query_map(
            "SELECT ",
            |(location, val1, val2, val3, val4)| {
                Image { location, val1, val2, val3, val4 }
            },
    )?;
    
    
    
    
    
    
    true
}


// *************************************************************************************************
fn instructions () {
	println!("new_unit   chitId   location");
	println!("");
}
